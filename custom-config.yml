# Copy this file into "/pga/custom-config.yml" once inside the container.

# Provide the name of the operator to the agent for config retrieval.
# Use the corresponding name of the PGA config given to the client cli.
container_name: "fitness"

# Declare keys of properties to look for inside the database (properties you require for calling your code).
# Remove the brackets and list them like so (leave brackets for an empty list):
# property_keys:
# - {key: '<prop_key>', is_list: True|False}
property_keys:
- {key: 'knapsack_capacity', is_list: False}
- {key: 'items_weights', is_list: True}
- {key: 'items_profits', is_list: True}

# Declare how to receive the individual and how to provide the output of your computation.
# Choose: input type ["file" || "value"] and output type ["file" || "console"].
# If "file" is chosen, provide a file path to the corresponding file (not required for other types).
input_type: "file"
output_type: "file"
input_path: "/pga/input.yml"
output_path: "/pga/output.yml"

# State how to call your code, including potential parameters.
# If you require additional properties, declare them using the related key used to retrieve it from the DB.
# Contents of lists will be passed as a comma-separated string, without whitespaces between consecutive elements.
# "... param={PROP_KEY}"
command: "java -jar main/FitnessEvaluation.jar capacity={knapsack_capacity} weights={items_weights} profits={items_profits}"
